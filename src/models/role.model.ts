import { DataTypes, Model } from "sequelize";
import { database } from "../config/database";
import { Permission } from "../constants/permissions";
/**
 * Interface representing the attributes of a Role model.
 * @interface IRoleModel
 * @property {string} [id] - The unique identifier of the role.
 * @property {string} name - The name of the role.
 * @property {string} [description] - The description of the role.
 * @property {Permission[]} permission - The permissions associated with the role.
 * @property {Date} [createdAt] - Timestamp indicating when the role was created.
 * @property {Date} [updatedAt] - Timestamp indicating when the role was last updated.
 */
export interface IRoleModel {
  /**
   * The unique identifier of the role.
   * This field is auto-generated by sequelize and is the primary key.
   */
  id?: string;
  /**
   * The name of the role.
   * This field is required and cannot be null.
   */
  name: string;
  /**
   * The description of the role.
   * This field is optional.
   */
  description?: string;
  /**
   * The permissions associated with the role.
   */
  permission: Permission[];
  /**
   * Timestamp indicating when the role was created.
   * This field is automatically managed by the database.
   */
  createdAt?: Date;
  /**
   * Timestamp indicating when the role was last updated.
   * This field is automatically managed by the database.
   */
  updatedAt?: Date;
}

/**
 * Represents a role in the database.
 * Extends sequelize's Model class to provide ORM capabilities.
 *
 * @class RoleModel
 * @extends {Model<IRoleModel>}
 * @implements {IRoleModel}
 */
export class RoleModel extends Model<IRoleModel> implements IRoleModel {
  public id!: string;
  public name!: string;
  public description?: string;
  public permission!: Permission[];
  public createdAt!: Date;
  public updatedAt!: Date;
  /**
   * Initializes the RoleModel with Sequelize.
   * Defines the schema for the 'roles' table and other configurations.
   *
   * @param sequelize - The Sequelize instance used to connect to the database.
   */
  static initModel(sequelize: typeof database) {
    RoleModel.init(
      {
        id: {
          type: DataTypes.UUID,
          primaryKey: true,
          unique: true,
          defaultValue: DataTypes.UUIDV4,
        },
        name: {
          type: DataTypes.STRING,
          allowNull: false,
        },
        description: {
          type: DataTypes.STRING,
          allowNull: true,
        },
        permission: {
          type: DataTypes.ARRAY(DataTypes.ENUM(...Object.values(Permission))),
          allowNull: true,
          defaultValue: [],
        },
      },
      {
        sequelize,
        tableName: "roles",
        timestamps: true,
        underscored: true,
        modelName: "Role",
        indexes: [
          {
            unique: true,
            fields: ["name"],
          },
        ],
      }
    );
  }
}
