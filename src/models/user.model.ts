import { DataTypes, Model } from "sequelize";
import { database } from "../config/database";
import { AccountStatus } from "../constants/accounts";

/**
 * Interface representing the attributes of a User model.
 *
 * @interface IUserModel
 * @property {number} [id] - The unique identifier of the user.
 * @property {string} email - The email address of the user.
 * @property {string} phoneNumber - The phone number of the user.
 * @property {string} firstName - The first name of the user.
 * @property {string} lastName - The last name of the user.
 * @property {Date} [dateOfBirth] - The date of birth of the user.
 * @property {number} countryId - The unique identifier of the country that the user belongs to.
 * @property {number} regionId - The unique identifier of the region that the user belongs to.
 * @property {number} cityId - The unique identifier of the city that the user belongs to.
 * @property {string} [password] - The password of the user.
 * @property {string} roleId - The unique identifier of the role that the user belongs to.
 * @property {string} [activationCode] - The activation code of the user.
 * @property {Date} [activationExpiresAt] - The expiration date of the activation code.
 * @property {AccountStatus} [accountStatus] - The account status of the user.
 * @property {Date} [lastLoginAt] - The timestamp of the user's last login.
 * @property {Date} [createdAt] - Timestamp indicating when the user was created.
 * @property {Date} [updatedAt] - Timestamp indicating when the user was last updated.
 */
export interface IUserModel {
  /**
   * The unique identifier of the user.
   * This field is auto-generated by sequelize and is the primary key.
   */
  id?: string;
  /**
   * The email address of the user.
   * This field is required and must be unique.
   */
  email: string;
  /**
   * The phone number of the user.
   * This field is required and must be unique.
   */
  phoneNumber: string;
  /**
   * The first name of the user.
   * This field is required and cannot be null.
   */
  firstName: string;
  /**
   * The last name of the user.
   * This field is required and cannot be null.
   */
  lastName: string;
  /**
   * The date of birth of the user.
   * This field is optional.
   */
  dateOfBirth?: Date;
  /**
   * The unique identifier of the country that the user belongs to.
   * This field is required and cannot be null.
   */
  countryId: number;
  /**
   * The unique identifier of the region that the user belongs to.
   * This field is required and cannot be null.
   */
  regionId: number;
  /**
   * The unique identifier of the city that the user belongs to.
   * This field is required and cannot be null.
   */
  cityId: number;
  /**
   * The password of the user.
   * This field is optional.
   */
  password?: string;
  /**
   * The unique identifier of the role that the user belongs to.
   * This field is required and cannot be null.
   */
  roleId: string;
  /**
   * The activation code of the user.
   * This field is optional.
   */
  activationCode?: string;
  /**
   * The expiration date of the activation code.
   * This field is optional.
   */
  activationExpiresAt?: Date;
  /**
   * The account status of the user.
   * This field is optional but has a default value of 'PENDING'.
   */
  accountStatus?: AccountStatus;
  /**
   * The timestamp of the user's last login.
   * This field is optional
   */
  lastLoginAt?: Date;
  /**
   * Timestamp indicating when the user was created.
   * This field is automatically managed by the database.
   */
  createdAt?: Date;
  /**
   * Timestamp indicating when the user was last updated.
   * This field is automatically managed by the database.
   */
  updatedAt?: Date;
}

/**
 * Represents a user in the database.
 * Extends sequelize's Model class to provide ORM capabilities.
 *
 * @class UserModel
 * @extends {Model<IUserModel>}
 * @implements {IUserModel}
 */
export class UserModel extends Model<IUserModel> implements IUserModel {
  public id!: string;
  public email!: string;
  public phoneNumber!: string;
  public firstName!: string;
  public lastName!: string;
  public dateOfBirth?: Date;
  public countryId!: number;
  public regionId!: number;
  public cityId!: number;
  public password?: string;
  public roleId!: string;
  public activationCode?: string;
  public activationExpiresAt?: Date;
  public accountStatus?: AccountStatus;
  public lastLoginAt?: Date;
  public createdAt!: Date;
  public updatedAt!: Date;
  /**
   * Initializes the UserModel with Sequelize.
   * Defines the schema for the 'users' table and other configurations.
   *
   * @param sequelize - The Sequelize instance used to connect to the database.
   */
  static initModel(sequelize: typeof database) {
    UserModel.init(
      {
        id: {
          type: DataTypes.UUID,
          primaryKey: true,
          unique: true,
          defaultValue: DataTypes.UUIDV4,
        },
        email: {
          type: DataTypes.STRING,
          allowNull: false,
          unique: true,
        },
        phoneNumber: {
          type: DataTypes.STRING,
          allowNull: false,
          unique: true,
        },
        firstName: {
          type: DataTypes.STRING,
          allowNull: false,
        },
        lastName: {
          type: DataTypes.STRING,
          allowNull: false,
        },
        dateOfBirth: {
          type: DataTypes.DATE,
          allowNull: true,
        },
        countryId: {
          type: DataTypes.INTEGER,
          allowNull: false,
        },
        regionId: {
          type: DataTypes.INTEGER,
          allowNull: false,
        },
        cityId: {
          type: DataTypes.INTEGER,
          allowNull: false,
        },
        password: {
          type: DataTypes.STRING,
          allowNull: true,
        },
        roleId: {
          type: DataTypes.UUID,
          allowNull: false,
        },
        activationCode: {
          type: DataTypes.STRING,
          allowNull: true,
        },
        activationExpiresAt: {
          type: DataTypes.DATE,
          allowNull: true,
        },
        accountStatus: {
          type: DataTypes.ENUM,
          values: Object.values(AccountStatus),
          allowNull: false,
          defaultValue: AccountStatus.PENDING,
        },
        lastLoginAt: {
          type: DataTypes.DATE,
          allowNull: true,
        },
      },
      {
        tableName: "users",
        sequelize,
        timestamps: true,
        underscored: true,
        modelName: "User",
        indexes: [
          {
            unique: true,
            fields: ["email"],
          },
          {
            unique: true,
            fields: ["phone_number"],
          },
        ],
      }
    );
  }
}
